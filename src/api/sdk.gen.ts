// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type OptionsLegacyParser } from '@hey-api/client-axios';
import type { GetHelloError, GetHelloResponse, CreateRecipeData, CreateRecipeError, CreateRecipeResponse, GetRecipesError, GetRecipesResponse, GetRecipeByIdData, GetRecipeByIdError, GetRecipeByIdResponse, UpdateRecipeByIdData, UpdateRecipeByIdError, UpdateRecipeByIdResponse, RemoveRecipeByIdData, RemoveRecipeByIdError, RemoveRecipeByIdResponse } from './types.gen';

export const client = createClient(createConfig());

export const getHello = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetHelloResponse, GetHelloError, ThrowOnError>({
        ...options,
        url: '/v1'
    });
};

/**
 * Add a new recipe
 */
export const createRecipe = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<CreateRecipeData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateRecipeResponse, CreateRecipeError, ThrowOnError>({
        ...options,
        url: '/v1/recipes'
    });
};

/**
 * Get all recipe
 */
export const getRecipes = <ThrowOnError extends boolean = false>(options?: OptionsLegacyParser<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRecipesResponse, GetRecipesError, ThrowOnError>({
        ...options,
        url: '/v1/recipes'
    });
};

/**
 * Get a single recipe
 */
export const getRecipeById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<GetRecipeByIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetRecipeByIdResponse, GetRecipeByIdError, ThrowOnError>({
        ...options,
        url: '/v1/recipes/{id}'
    });
};

/**
 * Update a single recipe
 */
export const updateRecipeById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<UpdateRecipeByIdData, ThrowOnError>) => {
    return (options?.client ?? client).patch<UpdateRecipeByIdResponse, UpdateRecipeByIdError, ThrowOnError>({
        ...options,
        url: '/v1/recipes/{id}'
    });
};

/**
 * Delete a single recipe
 */
export const removeRecipeById = <ThrowOnError extends boolean = false>(options: OptionsLegacyParser<RemoveRecipeByIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<RemoveRecipeByIdResponse, RemoveRecipeByIdError, ThrowOnError>({
        ...options,
        url: '/v1/recipes/{id}'
    });
};